
#! ОБЪЕКТЫ

#* Объект числа хранит своё значение — данные, мы можем вызвать его методы, совершать действия. 

#! КЛАССЫ

#* У всех встроенных объектов есть свой класс. В примере для числа 2.5 мы
#* видим класс действительных чисел (float), для списка — класс списка (list)

#todo Определим пустой класс: он не делает ничего, но позволит нам посмотреть на синтаксис.

# Используем ключевое слово class, за которым идёт название класса, в примере это SalesReport  
class SalesReport():  
    pass  
  
# Сравните это с определением пустой функции  
# Команда pass не делает ничего; на её месте могли быть другие инструкции  
# Мы используем её только потому, что синтаксически python требует, чтобы там было хоть что-то  

#! ОБЪЕКТЫ ИЗ КЛАССОВ

#* Мы написали свой первый класс — давайте создадим по нему объект. Вызываем класс
#* и получаем новый объект аналогично тому, как вызывается функция. Получаем результат.

class SalesReport():  
    pass  
  
# создаём объект по классу  
report = SalesReport()  
  
# мы можем создавать множество объектов по одному классу  
report_2 = SalesReport()  
  
# Это будут разные объекты.   
print(report == report_2)  
# => False  

#! АТРИБУТЫ И МЕТОДЫ

 # По-прежнему пока создаём пустой класс  
class SalesReport():  
    pass  
  
# Создаём первый отчёт по продажам   
report = SalesReport()  
  
# Мы добавим новый атрибут объекту.  
# Для этого через точку напишем имя атрибута и дальше как с обычной переменной  
report.amount = 10  
  
# То же самое делаем для второго отчёта.  
report_2 = SalesReport()  
report_2.amount = 20  
  
# Создадим вспомогательную функцию, она будет печатать общую сумму из отчёта  
def print_report(report):  
    print("Total amount:", report.amount)  
      
print_report(report) # => Total amount: 10  
print_report(report_2) # => Total amount: 20 

#* Для разных отчётов вывелись разные значения, хотя объекты создавались из одного класса.
#* Функция print_report делает операцию над отчётом. Так как классы увязывают данные и действия над
#* ними, положим print_report внутрь класса.

class SalesReport():  
    # Наш новый метод внутри класса.  
    # Мы определяем его похожим образом с обычными функциями,  
    #   но только помещаем внутрь класса и первым аргументом передаём self  
    def print_report(self):  
        print("Total amount:", self.amount)  
          
          
# Дальше мы применяем report так же, как и в примере выше   
report = SalesReport()  
report.amount = 10  
  
report_2 = SalesReport()  
report_2.amount = 20  
  
# Используем наши новые методы  
report.print_report() # => Total amount: 10  
report_2.print_report() # => Total amount: 20 

#* Мы определили метод внутри класса, и он стал доступен у всех экземпляров этого класса.

#todo Методы в целом похожи на обычные функции, но их ключевое отличие — доступ к самому объекту. 

#todo Давайте для примера определим ещё пару методов:

class SalesReport():  
    # Позволим добавлять много разных сделок   
    def add_deal(self, amount):   
        # На первой сделке создадим список для хранения всех сделок   
        if not hasattr(self, 'deals'):  
            self.deals = []  
        # Добавим текущую сделку  
        self.deals.append(amount)  
          
    # Посчитаем сумму всех сделок      
    def total_amount(self):  
        return sum(self.deals)  
      
    def print_report(self):  
        print("Total sales:", self.total_amount())  
          
# Используем наши новые возможности  
# Добавим две сделки и распечатаем отчёт  
report = SalesReport()  
report.add_deal(10_000)  
report.add_deal(30_000)  
report.print_report() # => Total sales: 40000 

#* Атрибут deals, определённый в одном методе, становится доступен сразу во всех методах класса.
#* Через self становятся доступны и остальные методы, например print_report использует метод total_amount.
#* Это позволяет компактно упаковывать логику внутри класса: внешнее использование становится гораздо лаконичнее.

#! МЕТОД _INIT_

#* Если мы вызовем total_amount до add_deal, то список сделок ещё не будет создан, и мы получим ошибку.
#* Также проверка на наличие списка в методе add_deal не кажется оптимальным решением, потому что создать
#* список нужно один раз, а проверять его наличие мы вынуждены на каждой сделке.

class SalesReport():  
    def add_deal(self, amount):   
        if not hasattr(self, 'deals'):  
            self.deals = []  
        self.deals.append(amount)  
          
    def total_amount(self):  
        return sum(self.deals)  
      
    def print_report(self):  
        print("Total sales:", self.total_amount())  
          
report = SalesReport()  
report.total_amount()  
# => AttributeError

#* Обе проблемы решились бы, если задавать атрибутам исходное значение. Для этого у классов
#* есть метод инициализации __init__. Если мы определим метод с таким именем, код в нём
#* вызовется при создании объекта.

#* __init__ — это технический метод, поэтому его имя начинается и заканчивается двумя подчёркиваниями.
#* Он получает первым аргументом сам объект, в нём могут выполняться любые операции. Оставшиеся аргументы
#* он получает из вызова при создании: если мы напишем report = SalesReport("Info", 20), то вторым и третьим
#* аргументом в __init__ передадутся "Info" и 20.

class SalesReport():  
    # Будем принимать в __init__ ещё и имя менеджера  
    def __init__(self, manager_name):  
        self.deals = []  
        self.manager_name = manager_name  
          
    def add_deal(self, amount):   
        self.deals.append(amount)  
          
    def total_amount(self):  
        return sum(self.deals)  
      
    def print_report(self):  
        # И добавлять это имя в отчёт  
        print("Manager:", self.manager_name)  
        print("Total sales:", self.total_amount())  
          
   
report = SalesReport("Ivan Taranov")  
report.add_deal(10_000)  
report.add_deal(30_000)  
report.print_report()  
# =>   
# Manager: Ivan Taranov  
# Total sales: 40000

#* Кроме __init__ у классов можно определить ряд технических методов, которые также называют магическими.
#* Дело в том, что они не вызываются напрямую, но позволяют реализовать операции сложения object_1 + object_2
#* или сравнения object_1 > object_2. 

#todo Пример 
#*  Улучшите класс DepartmentReport, добавив в него инициализатор.
#*  Класс при инициализации должен принимать переменную company_name и инициализировать её
#*  значением свойство company, а также инициализировать свойство revenues пустым списком.
#*  Также модифицируйте метод average_revenue. Теперь он должен возвращать строку следующего
#*  вида "Average department revenue for <company_name>: <average_revenue>"

class DepartmentReport():
    def __init__(self, company_name):
        self.revenues=[]
        self.company=company_name

    def add_revenue(self, amount):
        if not hasattr(self, 'revenues'):
            self.revenues=[]
        self.revenues.append(amount)

    def average_revenue(self):
        average=int(round(sum(self.revenues)/len(self.revenues),0))
        return f'Average department revenue for {self.company}: {average}'
    
#! КРАТКОЕ РЕЗЮМЕ

#todo атрибут объекта — это просто его переменная;
#todo метод объекта — это его функция;
#todo метод объекта автоматически получает первым аргументом сам объект под именем self;
#todo класс описывает объект через его атрибуты и методы;
#todo мы можем создавать множество экземпляров одного класса, и значения их атрибутов независимы друг от друга;
#todo если определить метод __init__, то он будет выполняться при создании объекта;
#todo всё это позволяет компактно увязывать данные и логику внутри объекта.

#* Допустим, теперь мы хотим получать средний размер сделки и список клиентов, из которого исключены
#* повторения (в случае, если компания заключала несколько сделок с одним и тем же клиентом).

 class SalesReport():  
    def __init__(self, employee_name):  
        self.deals = []  
        self.employee_name = employee_name  
      
    def add_deal(self, company, amount):   
        self.deals.append({'company': company, 'amount': amount})  
          
    def total_amount(self):  
        return sum([deal['amount'] for deal in self.deals])  
      
    def average_deal(self):  
        return self.total_amount()/len(self.deals)  
      
    def all_companies(self):  
        return list(set([deal['company'] for deal in self.deals]))  
      
    def print_report(self):  
        print("Employee: ", self.employee_name)  
        print("Total sales:", self.total_amount())  
        print("Average sales:", self.average_deal())  
        print("Companies:", self.all_companies())  
      
      
report = SalesReport("Ivan Semenov")  
  
report.add_deal("PepsiCo", 120_000)  
report.add_deal("SkyEng", 250_000)  
report.add_deal("PepsiCo", 20_000)  
  
report.print_report()  
# => Employee:  Ivan Semenov  
# Total sales: 390000  
# Average sales: 130000.0  
# Companies: ['PepsiCo', 'SkyEng'] 

#* Мы расширили отчёт, но внешний код использования классов не увеличился. Отчёт,
#* который мы вывели, достаточно простой, но можно автоматически генерировать презентацию
#* с данными и графиками в PDF, при этом внешний интерфейс не менялся бы. Мы просто передаём
#* данные на вход и на выходе получаем отчёт.

#! ОТСЛЕЖИВАНИЕ СОСТОЯНИЯ

#* Одно из классических предписаний для классов — у каждого из множества объектов есть некоторые
#* меняющиеся состояния. 

#todo Вернёмся к примеру: есть база клиентов с основной информацией; в реальном времени нам приходит
#todo информация о покупках. Запустим промокампанию, чтобы поощрить старых клиентов, которые сделали
#todo у нас много заказов, и выдать им скидку:
 
class Client():  
    # Базовые данные  
    def __init__(self, email, order_num, registration_year):  
        self.email = email  
        self.order_num = order_num  
        self.registration_year = registration_year  
        self.discount = 0  
          
    # Оформление заказа  
    def make_order(self, price):  
        self.update_discount()  
        self.order_num += 1  
        # Здесь было бы оформление заказа, но мы просто выведем его цену  
        discounted_price = price * (1 - self.discount)   
        print(f"Order price for {self.email} is {discounted_price}")  
              
    # Назначение скидки  
    def update_discount(self):   
        if self.registration_year < 2018 and self.order_num >= 5:  
            self.discount = 0.1 
            
# Применение  
          
# Сделаем подобие базы  
client_db = [   
    Client("max@gmail.com", 2, 2019),  
    Client("lova@yandex.ru", 10, 2015),  
    Client("german@sberbank.ru", 4, 2017)  
]  
  
  
# Сгенерируем заказы  
client_db[0].make_order(100)  
# => Order price for max@gmail.com is 100  
  
client_db[1].make_order(200)  
# => Order price for lova@yandex.ru is 180.0  
  
client_db[2].make_order(500)  
# => Order price for german@sberbank.ru is 500  
  
client_db[2].make_order(500)  
# => Order price for german@sberbank.ru is 450.0 

#! КОМБИНАЦИЯ ОПЕРАЦИЙ

#* Классы могут пригодиться, если вы регулярно делаете над данными одну и ту же
#* последовательность разноплановых функций. Вы можете упаковать их в класс и в
#* дальнейшем сразу получать результат по загруженным данным.

#todo У нас есть численные данные из разных источников. Если они в виде строк, то нужно привести их к
#todo числам, а пропуски — заполнить значениями. Сделаем доступ к медиане, среднему значению и стандартному
#todo отклонению:

import statistics  
  
class DataFrame():  
    def __init__(self, column, fill_value=0):  
        # Инициализируем атрибуты  
        self.column = column  
        self.fill_value = fill_value  
        # Заполним пропуски  
        self.fill_missed()  
        # Конвертируем все элементы в числа  
        self.to_float()  
          
    def fill_missed(self):  
        for i, value in enumerate(self.column):  
            if value is None or value == '':  
                self.column[i] = self.fill_value  
                  
    def to_float(self):  
        self.column = [float(value) for value in self.column]  
      
    def median(self):  
        return statistics.median(self.column)  
      
    def mean(self):  
        return statistics.mean(self.column)  
      
    def deviation(self):  
        return statistics.stdev(self.column)
    
# Воспользуемся классом  
df = DataFrame(["1", 17, 4, None, 8])  
  
print(df.column)  
# => [1.0, 17.0, 4.0, 0.0, 8.0]  
print(df.deviation())  
# => 6.89  
print(df.median())  
# => 4.0    

#todo Мы получили очень лаконичный интерфейс для использования класса. В __init__ мы использовали значение
#todo по умолчанию для fill_value, а методы позволяют нам определять необязательные параметры.

#! КЛАСС-ОБЁРТКА 

#* Классы можно использовать тогда, когда у вас есть процесс, который требует сложной конфигурации,
#* повторяющейся из раза в раз. Можно написать класс-обёртку, который сведёт этот процесс к одному-двум методам.

#todo Пример

#* Представим, вы делаете обработку данных и в конце каждого дня сохраняете результат в архив. Вы хотите,
#* чтобы данные каждого дня лежали в отдельном файле для этого дня, при этом можно было бы получить данные
#* за произвольный день. Пример

import pickle  
from datetime import datetime  
from os import path  
  
class Dumper():  
    def __init__(self, archive_dir="archive/"):  
        self.archive_dir = archive_dir  
          
    def dump(self, data):  
        # Библиотека pickle позволяет доставать и класть объекты в файл  
        with open(self.get_file_name(), 'wb') as file:  
            pickle.dump(data, file)  
              
    def load_for_day(self, day):  
        file_name = path.join(self.archive_dir, day + ".pkl")   
        with open(file_name, 'rb') as file:  
            sets = pickle.load(file)  
        return sets  
          
    # возвращает корректное имя для файла   
    def get_file_name(self):   
        today = datetime.now().strftime("%y-%m-%d")   
        return path.join(self.archive_dir, today + ".pkl")  
      
      
# Пример использования  
  
data = {  
    'perfomance': [10, 20, 10],  
    'clients': {"Romashka": 10, "Vector": 34}  
}  
  
  
dumper = Dumper()  
  
# Сохраним данные  
dumper.dump(data)  
  
# Восстановим для сегодняшней даты  
file_name = datetime.now().strftime("%y-%m-%d")
restored_data = dumper.load_for_day(file_name)
print(restored_data)  
# => {'perfomance': [10, 20, 10], 'clients': {'Romashka': 10, 'Vector': 34}}  

#todo Пример

#* Напишите класс сборщика технических сообщений OwnLogger.

#* У него должен быть

#* атрибут logs, содержащий {"info": None, "warning": None, "error": None, "all": None}.
#* метод log(message, level), который записывает сообщения. Здесь сообщение message может быть любым,
#*  а level — один из "info", "warning", "error".
#* метод show_last(level), где level может быть "info", "warning", "error", "all".
#* Для "all" он просто возвращает последнее добавленное сообщение, а для остальных — последнее поступившее
#*  сообщение соответствующего уровня. При этом по умолчанию значение именно "all".

#* Если подходящего сообщения нет, возвращает None.

class OwnLogger():  
    def __init__(self,logs = {"info": None, "warning": None, "error": None, "all": None}):  
        self.logs = logs
          
    def log(self, message, level): 
        self.message=message
        if level in "info" or level in "warning" or level in "error":
            self.logs[level]=message
            
                  
    def show_last(self, level="all"):  
        if level in "info":
            return self.logs["info"]
        elif level in 'warning':
            return self.logs['warning']
        elif level in "error":
            return self.logs["error"]
        else:
            return self.message

#! ИМПОРТ И ОРГАНИЗАЦИЯ КОДА

#todo Классы, как и библиотечные функции, можно импортировать в другие программы. Для этого нужно положить
#todo класс в отдельный файл в корне проекта и использовать ключевое слово import. 
#todo Например, если мы положим Dumper в файл dumper.py в корне проекта, то его можно импортировать командой:
from dumper import Dumper

#* Пишем from <имя файла без .py> import <имя класса>. Имя файла должно начинаться с буквы и не совпадать с именами
#* библиотечных модулей. Если файлов с классами много, их можно складывать в папки, предварительно положив туда
#* пустой файл __init__.py — это требование Python.

#* Сгруппируем классы из примеров в папке helpers. Структура файлов:
# helpers
-- __init__.py
-- dumper.py
-- data_frame.py
-- client.py

#* Импортируем, соединяя все шаги через точку с помощью того же синтаксиса, что использовался для
#* импорта библиотечных функций.

from helpers.dumper import Dumper  
from helpers.data_frame import DataFrame  
from helpers.client import Client  


#! Применение ООП для работы с файлами

#todo На самом деле файлы, как и всё в Python, являются объектами класса. Причём этот класс встроен в Python.
#todo У файлов есть свои атрибуты и методы.
#todo Давайте на примере работы с файлами разберём, как работают классы, реализованные «под капотом» в Python 

#? ПУТЬ К ФАЙЛУ
#* Путь (от англ. path) — набор символов, показывающий расположение файла или каталога в файловой системе.

#* В операционных системах UNIX разделительным знаком при записи пути является «/» (слеш), 
#* в Windows — «\» (обратный слеш). 
#* Эти знаки служат для разделения названия каталогов, составляющих путь к файлу. Все вы видели,
#* например, такой путь на ОС Windows: C:\Program Files. Это и есть путь до папки Program Files.

#* Существует два типа пути:
#* абсолютный;
#* относительный.

#* Абсолютный путь всегда считается от «корня», той папки, откуда потом «вырастают» все остальные папки.
#* Для Windows это диск С:, D: и т. д., для Unix это “/”. Абсолютный путь всегда уникальный.

#todo Абсолютный путь — это путь, который указывает на одно и то же место в файловой системе,
#todo вне зависимости от текущего рабочего каталога или других обстоятельств. Его ещё называют полным.

#todo Относительный путь — это путь по отношению к текущему рабочему каталогу пользователя.

#* Чтобы поработать с путями, есть модуль os. Функция os.chdir() позволяет нам изменить директорию, которую мы
#* в данный момент используем. Если вам нужно знать, какой путь вы в данный момент используете, для этого нужно
#* вызвать os.getcwd().

#todo Примечание: Все дальнейшие пути указаны для конкретной машины на ОС Linux. У вас эти результаты будут отличаться.

# получить текущий путь
start_path = os.getcwd()
print(start_path) # /home/nbuser/library

#* Далее попробуем подняться на директорию выше:
os.chdir("..") # подняться на один уровень выше
os.getcwd() # '/home/nbuser'

#* Теперь вернемся в ту директорию, из которой стартовали. Изначально мы сохраняли её в переменной start_path.
os.chdir(start_path)
os.getcwd() # '/home/nbuser/library'

#* С помощью функции os.listdir() можно получить весь список файлов, находящихся в директории. Если не указать
#* никаких аргументов, то будет взята текущая директория.

# список файлов и директорий в папке
import os

print(os.listdir()) # ['SnapchatLoader', 'FBLoader', 'tmp.py', '.gitignore', 'venv', '.git']

if 'tmp.py' not in os.listdir():
    print("Файл отсутствует в данной директории")
    
#* Для того чтобы склеивать пути с учётом особенностей ОС, следует использовать функцию os.path.join(). 
#* Это связано с тем, что в разных операционных системах могут быть разные разделители каталогов, например
#* в ОС Windows этим разделителем является «\», а в Linux — «/»,
#* как мы и говорили в начале юнита. Поэтому, чтобы поиск файла проходил гладко в обеих системах (ведь ваш скрипт
#* могут запускать на любой системе в связи с кросс-платформенностью Python), лучше всё-таки использовать os.path.join().

# соединяет пути с учётом особенностей операционной системы
print(start_path)
print(os.path.join(start_path, 'test'))

# /home/nbuser/library
# /home/nbuser/library/test

#? РАБОТА С ФАЙЛАМИ

#* Python «из коробки» располагает достаточно широким набором инструментов для работы с файлами. Для того чтобы 
#* начать работать с файлом, надо его открыть с помощью команды специальной функции open.
f = open('path/to/file', 'filemode', encoding='utf8')\
    
#* Давайте по порядку разберём все аргументы:

#* path/to/file — путь к файлу может быть относительным или абсолютным. Можно указывать в Unix-стиле 
#* (path/to/file) или в Windows-стиле (path\to\file).
#* filemode — режим, в котором файл нужно открывать.

#* Записывается в виде строки, может принимать следующие значения:
#* r — открыть на чтение (по умолчанию);
#* w — перезаписать и открыть на запись (если файла нет, то он создастся);
#* x — создать и открыть на запись (если уже есть — исключение);
#* a — открыть на дозапись (указатель будет поставлен в конец);
#* t — открыть в текстовом виде (по умолчанию);
#* b — открыть в бинарном виде.
#* 3. encoding — указание, в какой кодировке файл записан (utf8, cp1251 и т. д.) По умолчанию стоит utf-8.
#* При этом можно записывать кодировку как через дефис, так и без: utf-8 или utf8.

#* Открытие файла на запись является блокирующей операцией, то есть она останавливает работу нашей программы до того,
#* пока файл не откроется.

#todo Теперь давайте поговорим про то, как записывать какую-либо информацию в файл.

#* При открытии файла внутри него ставится указатель текущей позиции для чтения. При открытии в режиме чтения ('r')
#* или записи ('w') указатель ставится на начало, в режиме 'a' (добавление новых записей в конец файла) — в конец.
#* Откроем файл на запись и с помощью метода write запишем в него строку. В качестве результата метод write
#* возвращает количество записанных символов.

f = open('test.txt', 'w', encoding='utf8')

# Запишем в файл строку
f.write("This is a test string\n")
f.write("This is a new string\n")

#* После вызова команды write ваши данные не сразу попадут и сохранятся в файл. Связано это с особенностями
#* внутренней работы операционных систем. Если для вас критично своевременное попадание информации на жесткий
#* диск компьютера, то после записи вызывайте f.flush() или закрывайте файл. Закрыть файл можно с помощью
#* метода close().
# обязательно нужно закрыть файл иначе он будет заблокирован ОС
f.close()

#* Теперь давайте посмотрим, как читать данные из файла.
#* Откроем файл для чтения, в который только что записали две строки:
f = open('test.txt', 'r', encoding='utf8')
#*Вот его содержимое на жестком диске:
This is a test string
This is a new string

#* После того, как файл открыт для чтения, мы можем читать из него данные.
#* f.read(n) — операция, читающая с текущего места n символов, если файл открыт в t режиме, или n байт, если файл открыт в b режиме,
#* и возвращающая прочитанную информацию.
print(f.read(10)) # This is a 

#* После прочтения указатель на содержимое остается на той позиции, где чтение закончилось. Если n не указать,
#* будет прочитано «от печки», то есть от текущего места указателя и до самого конца файла.

# считали остаток файла
f.read() # test string\nThis is a new string\n

#* После работы обязательно закрываем файл:

# обязательно закрываем файл
f.close()

#? ЧТЕНИЕ И ЗАПИСЬ ПОСТРОЧНО

#* Зачастую с файлами удобнее работать построчно, поэтому для этого есть отдельные методы:

#* writelines — записывает список строк в файл;
#* readline — считывает из файла одну строку и возвращает её;
#* readlines — считывает из файла все строки в список и возвращает их.
#* Метод f.writelines(sequence) не будет сам за вас дописывать символ конца строки ('\n'), поэтому
#* при необходимости его нужно прописать вручную.

f = open('test.txt', 'a', encoding='utf8') # открываем файл на дозапись

#* sequence = ["other string\n", "123\n", "test test\n"]
f.writelines(sequence) # берет строки из sequence и записывает в файл (без переносов)

f.close()

#* Попробуем теперь построчно считать файл с помощью readlines:

f = open('test.txt', 'r', encoding='utf8')

print(f.readlines()) # считывает все строки в список и возвращает список

f.close()

#* Метод f.readline() возвращает строку (символы от текущей позиции до символа переноса строки
#* \n, который остаётся в конце строки и опускается только в последней строке файла, если файл не
#* заканчивается новой строкой):

f = open('test.txt', 'r', encoding='utf8')

print(f.readline()) # This is a test string
print(f.read(4)) # This
print(f.readline()) # is a new string

f.close()

#? ФАЙЛ КАК ИТЕРАТОР

#* Объект файл является итератором, поэтому его можно использовать в цикле for.

#* Для чего это нужно?

#* Итераторы представляют собой такой объект, который вычисляет какие-то действия на каждом шаге,
#*  а не все сразу. На примере файла это выглядит примерно так. Предположим, у вас есть огромный
#*  текстовый файл, который весит несколько гигабайт. Если попытаться разом считать его полностью
#*  с помощью f.readlines(), то он будет загружен в вашу программу, в то время как переменная, в
#*  которую будет записан файл, станет весить столько же, сколько и объём считанного файла.

#* В большинстве задач с обработкой текста он весь сразу не нужен, поэтому мы можем, например,
#* считывать его построчно, обрабатывать строку и забывать из нашей программы, чтобы считать новую.
#* Тогда весь файл огромного объема не будет «висеть» в памяти компьютера.

#todo Не стоит считывать файл полностью — в большинстве задач с обработкой текста весь файл разом читать
#todo не требуется. В таком случае с файлом работают построчно.

f = open('test.txt')  # можно перечислять строки в файле
for line in f:
    print(line, end='')

# This is a test string
# This is a new string
# other string
# 123
# test test

f.close()

Цикл for, как мы помним, — это цикл, который перебирает по очереди.

#? МЕНЕДЖЕР КОНТЕКСТА WITH

#* После работы с файлом его необходимо закрыть с помощью метода close(). Файл освобождается для операционной
#* системы (если он был открыт для записи), и другие приложения могут получать к нему доступ. Если не закрыть файл
#* явно, то информация, записываемая в него, может быть утеряна, или файл может повредиться.

#todo Для явного указания места работы с файлом, а также чтобы не забывать закрывать файл после обработки,
#todo существует менеджер контекста with.

# В блоке менеджера контекста открытый файл «жив» и с ним можно работать, при выходе из блока - файл закрывается.
with open("test.txt", 'rb') as f:
    a = f.read(10)
    b = f.read(23)

f.read(3) # Error!

#* Тело менеджера контекста определяется одним отступом вправо относительно отступов ключевого слова with.
#* Менеджер контекста неявно вызывает закрытие файла после работы, что освобождает вас от забот о том, закрыли
#* ли вы файл или нет. Закрытие файла происходит при любом стечении обстоятельств, даже если внутри with будет ошибка.

#! Исключения 

#* Предположим, мы написали программу. Она даже запустилась и вроде даже что-то сделала. Но в один 
#* прекрасный момент всё вылетело, а в терминале вылезло непонятное сообщение:

Traceback (most recent call last):
File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: "odin"

#* Эта ошибка относится к типу исключительных ситуаций. Исключительные ситуации порой возникают в случаях,
#* когда вы написали код правильно, он запустился и отработал своё, а запустив код на следующий день, вы видите ошибку. 

#todo Исключения — это такие ошибки, которые возникают не во время компиляции программы, а в процессе её исполнения,
#todo в случаях, если что-то идёт не так.

#* Ошибки бывают двух видов:

#* отлавливаемые — все, что наследуются от класса Exception;
#* не отлавливаемые — SystemExit, KeyboardInterrupt и т. д.

print("Перед исключением")
c = 1 / 0  # Здесь что-то не так….
print("После исключения")

#todo В консоли мы увидим следующий результат:

# Перед исключением
# Traceback (most recent call last):
# File "<stdin>", line 1, in <module>
# ZeroDivisionError: division by zero

#* Как же сделать так, чтобы программа не вылетала при ошибке и продолжала свою работу? 
#* Очень просто! Для этого и нужна конструкция try-except.

try:  # Добавляем конструкцию try-except для отлова нашей ошибки
    print("Перед исключением")
    # теперь пользователь сам вводит числа для деления
    a = int(input("a: "))
    b = int(input("b: "))
    c = a / b  # здесь может возникнуть исключение деления на ноль
    print(c)  # печатаем c = a / b если всё хорошо
except ZeroDivisionError as e: # Добавляем тип именно той ошибки, которую хотим отловить.     
    print(e)  # Выводим информацию об ошибке
    print("После исключения")
 
print("После После исключения")

#* В данном случае тоже может возникнуть ошибка деления на ноль, если пользователь введёт b = 0.
#* Поэтому мы отлавливаем ошибку ZeroDivisionError. В блоке try помещается «опасный» кусок кода,
#* который может вызывать исключения, а в блоке except указывается класс ошибки, которую мы хотим отловить,
#* а затем помещается код, который нужно выполнить в случае возникновении ошибки. 

#* После возникновении ошибки код в блоке try прервётся, перейдёт в блок except, а затем продолжит выполняться
#* дальше — программа не вылетает, как это было без обработчика исключений. В этом и есть главная суть конструкции
#* try-except.

#* Это ещё не всё! Есть также блоки finally и else. Код в блоке else выполнялся после завершения цикла.
#* С try-except есть нечто похожее. Посмотрите на пример кода ниже.

try:
    *ваш код*
except Ошибка:
    *Код отлова*
else:
    *Код, который выполнится если всё хорошо прошло в блоке try*
finally:
    *Код, который выполнится по любому*
    
#todo Важно! Обратите внимание на отступы — код внутри конструкции сдвинут на второй уровень вложенности.

#todo Пример
age = int(input("Сколько тебе лет?"))

 
if age > 100 or age <= 0:
    raise ValueError("Тебе не может быть столько лет")
 
print(f"Тебе {age} лет!") # Возраст выводится только если пользователь ввёл правильный возраст.

#todoДавайте кратко подведём итоги:

#todoИсключения — это ошибки, которые выбрасываются при неправильной работе программы, и останавливают
#todo её выполнение, если они не обработаны.
#todo Конструкция try-except выглядит следующим образом и служит для обработки исключений:

try:
    *код, который может вызвать ту или иную ошибку*
except *ошибка*:
    *код, который выполнится в случае возникновения ошибки*
else:
    *код, который выполнится только в случае если в try ничего не сломалось*
finally:
    *код, который выполнится по любому*
#todo Блоки finally и else являются не обязательными, но могут быть использованы для вашего удобства.
#todo Код из блока finally выполняется в любом случае, независимо от исхода в блоках try-except.
#todo Код из блока else выполняется только в случае успешного выполнения кода в try.
#todo Выбрасывать ошибки можно и по своему желанию с помощью конструкции raise *Тип ошибки*
#todo (сообщение, которое нужно вывести в консоль).

#! Тонкости обработки исключений. Собственные классы исключений

#todo Если кратко обобщить, то можно сказать так: исключения — это тоже классы. Будучи классами, они могут
#todo наследоваться. «Отлавливать» можно как сам класс, так и его родителя (в любом колене). В этом случае
#todo надо убедиться в том, чтобы сначала обрабатывались более конкретные исключения, иначе они могут быть
#todo перекрыты их родителями и попросту упущены.

#* Иногда может понадобиться написать собственное исключение. Например, вы пишете собственную игру и вам нужно
#* обработать ситуацию, когда ваш персонаж пытается выучить способность, при этом не достигнув нужного уровня.
#* Или пытается положить в уже заполненный инвентарь ещё какой-то предмет.
#* Принцип написания и отлова собственного исключения следующий:

class MyException(Exception):  # создаём пустой класс исключения 
    pass

 
try:
    raise MyException("message")  # поднимаем наше исключение
except MyException as e:  # ловим его
    print(e)  # выводим информацию об исключении
    
#todo Лучше всего, чтобы исключения были связаны между собой, то есть наследовались от общего класса исключения.
#todo Если продолжить пример с игрой из прошлого абзаца, то общим классом был бы GameplayException.

#todo Давайте теперь попробуем построить собственные исключения с наследованием:

class ParentException(Exception):  # создаём пустой класс исключения, наследуемся от exception
    pass

 
class ChildException(ParentException):  # создаём пустой класс исключения-потомка, наследуемся от ParentException
    pass

 
try:
    raise ChildException("message")  # поднимаем исключение-потомок
except ParentException as e:  # ловим его родителя
    print(e)  # выводим информацию об исключении
    
#* В этом случае мы успешно обработали собственный класс-наследник, хотя он и не является ParentException.
#* Когда исключение возникает, в каждом блоке except по порядку интерпретатор проверяет, является ли исключение
#* наследником или самим классом отлавливаемого исключения, и если да, то выполняет код в except.

class ParentException(Exception):
    def __init__(self, message, error):  # допишем к нашему пустому классу конструктор, который будет печатать дополнительно в консоль информацию об ошибке.
        super().__init__(message)  # помним про вызов конструктора родительского класса
        print(f"Errors: {error}")  # печатаем ошибку

 
class ChildException(ParentException): # создаём пустой класс исключения-потомка, наследуемся от ParentException
    def __init__(self, message, error):
        super().__init__(message, error)
 
 
try:
    raise ChildException("message", "error")  # поднимаем исключение-потомок, передаём дополнительный аргумент
except ParentException as e:
    print(e)  # выводим информацию об исключении
    
#* В консоли мы увидим следующее:
#todo Errors: error
#todo message

#todo Давайте подведём итоги:

#* Исключения — это такие особенные классы, которые, как и любые классы, можно наследовать. Если вы хотите ловить
#* несколько исключений, то сначала ловите потомков, а потом родителей, чтобы ничего не упустить.

#* Чтобы создать собственный класс, нужно просто написать пустой класс и наследовать его от класса Exception,
#* этого будет достаточно.

#* Необязательно «отлавливать» сам класс. При необходимости можно отлавливать его родителя, это тоже будет работать,
#* но вы можете упустить важную информацию.