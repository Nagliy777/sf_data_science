
#* Система координат — это способ определения положения точки в пространстве или на плоскости.
#* Самая простая система координат — двумерная прямоугольная, или декартова, система координат,
#* с которой вы знакомы из уроков математики в школе. Каждой точке в этой системе соответствуют два
#* значения: значение по оси абсцисс и значение по оси ординат.

#* Ось абсцисс — горизонтальная ось в прямоугольной системе координат. Традиционно её называют осью X.

#* Ось ординат — вертикальная ось в прямоугольной системе координат. Традиционно её называют осью Y.

#! БАЗОВАЯ ВИЗУАЛИЗАЦИЯ В PANDAS
#* Для визуализации Pandas использует библиотеку matplotli
#* Для установки библиотеки используется стандартная команда, которую нужно выполнить в терминале:
pip install matplotlib

#* или в ячейке ноутбука:
! pip install matplotlib

#* Основным методом для создания простейших графиков в Pandas является plot().

x — название признака, который будет отложен по оси абсцисс;
y — название признака, который будет отложен по оси ординат;
figsize — размер графика (кортеж из ширины и высоты в дюймах);
kind —тип визуализации. Основные типы:
'line' — линейный график (по умолчанию);
'bar' — столбчатая диаграмма;
'barh' — горизонтальная столбчатая диаграмма;
'hist' — гистограмма;
'box' — коробчатая диаграмма (boxplot);
'pie' — круговая диаграмма;
'scatter' — диаграмма рассеяния.
grid — отображение сетки (по умолчанию False);
legend — отображение легенды (по умолчанию False);
title — название графика;
color — цвет.

#? Пример:
#* Будем использовать линейный график размером 12x4 (попробуйте взять другие числа, чтобы увидеть разницу).
#* Подпишем график и отобразим сетку. Параметр lw (line width) отвечает за ширину линии для линейного графика.

grouped_cases = covid_df.groupby('date')['daily_confirmed'].sum()
grouped_cases.plot(
    kind='line',
    figsize=(12, 4),
    title='Ежедневная заболеваемость во времени',
    grid = True,
    lw=3
);

#* Теперь построим гистограмму, которая покажет распределение ежедневной заболеваемости во всём мире.
#* Для этого параметр kind выставляем на значение 'hist'. Параметр bins (корзины) отвечает за число
#* прямоугольников в гистограмме — пусть их будет 10 (попробуйте использовать другие числа, чтобы увидеть
#* разницу).

grouped_cases.plot(
    kind='hist',
    figsize=(10, 6),
    title='Распределение ежедневной заболеваемости',
    grid = True,
    color = 'black',
    bins=10
);

#* построим столбчатую диаграмму, которая покажет ТОП-10 стран по суммарной заболеваемости.
#* Для этого сгруппируем данные по странам и вычислим последний зафиксированный показатель с
#* помощью агрегирующего метода last() — он возвращает последнее значение в столбце DataFrame.
#* Для построения столбчатой диаграммы значение параметра kind выставляем на 'bar'.
#* Параметр colormap отвечает за цветовую гамму графика.

grouped_country = covid_df.groupby(['country'])['confirmed'].last()
grouped_country = grouped_country.nlargest(10)
grouped_country.plot(
    kind='bar',
    grid=True,
    figsize=(12, 4),
    colormap='plasma'
);

#* А теперь посмотрим, как в этих десяти странах соотносится количество заболевших и умерших от вируса.
#* Для этого отобразим сразу два показателя на столбчатой диаграмме: 

grouped_country = covid_df.groupby(['country'])[['confirmed', 'deaths']].last()
grouped_country = grouped_country.nlargest(10, columns=['confirmed'])
grouped_country.plot(     kind='bar',     grid=True,     figsize=(12, 4), );

#! НЕМНОГО О БИБЛИОТЕКЕ
#* Matplotlib — это библиотека Python, обладающая большим количеством возможностей для
#* визуализации и настройки отображения графиков и диаграмм.

#* За визуализацию графиков в Matplotlib отвечает модуль pyplot. Традиционно он импортируется
#* под псевдонимом plt. Для более корректного отображения графиков в ноутбуках используется команда %matplotlib inline.

import matplotlib.pyplot as plt
%matplotlib inline

#* Примечание. Если вы используете тёмную тему в VS Code, то для корректного отображения
#* графиков на тёмном фоне выполните следующую команду по установке стиля отображения:
plt.style.use('default')

#!  ОСНОВНЫЕ ОБЪЕКТЫ MATPLOTLIB

#* Библиотека Matplotlib позволяет работать в нескольких режимах. Самый распространённый
#* и мощный по функционалу — объектно-ориентированный режим. Он основан на работе с объектами
#* фигур (figure, их ещё называют канвасами или холстами) и координатных плоскостей (axes,
#* или системы координат). 

#*Процесс работы над графиком максимально прозрачен: сначала создаётся объект фигуры (fig),
#*содержащий необходимую информацию и настройки, например размер в дюймах (figsize, восемь дюймов
#*в ширину, четыре — в высоту). К этому объекту с помощью метода add_axes() добавляется координатная
#*плоскость, а на ней располагаются графические объекты. Для создания координатной плоскости необходимо
#*указать её расположение на фигуре в виде списка из координат. В нашем случае она начинается в левом нижнем
#*углу без отступов (координаты 0, 0) и занимает всё отведённое место в области (100%, ширина и высота равны1).
fig = plt.figure(figsize=(8, 4))
axes = fig.add_axes([0, 0, 1, 1])

#todo Основные параметры метода scatter()

x, y — последовательности, которые будут отложены по осям абсцисс и ординат;
s — размер маркеров;
marker — вид маркеров ('o' — точки, '^' — треугольники);
c — цвет маркеров.

#* На диаграмме рассеяния по оси абсцисс откладываем суммарное число поставленных вакцин,
#* а по оси ординат — ежедневный прирост заболевших:

us_data = covid_df[covid_df['country'] == 'United States']

fig = plt.figure(figsize=(8, 4))
axes = fig.add_axes([0, 0, 1, 1])
axes.scatter(
    x=us_data['people_fully_vaccinated'], 
    y=us_data['daily_confirmed'], 
    s=100,
    marker='o',
    c = 'blue'
);

#todo  Для построения круговых диаграмм в Matplotlib используется метод pie().

#* x — значения, по которым будет строиться круговая диаграмма;
#* labels — метки, соответствующие значениям;

#* autopct — формат отображения долей на диаграмме (например, '%.1f%%' означает, 
#* что округление будет производиться до первого знака после запятой и при выводе будет указан знак
#* "%"; открывающий и закрывающий проценты означают форматирование, а внутренний — вывод знака "%");

#* explode — последовательность, которая определяет долю смещения сектора от центра для каждого значения из x.

#? Пример:
#* ТОП-10 комбинаций вакцин (vaccines) по распространённости мы находим с помощью метода value_counts().
#* Круговую диаграмму строим на полученных значениях, метки для каждого значения — индексы промежуточной
#* таблицы. Будем отображать доли в процентах и округлять их до одного знака после запятой. Самую
#* распространённую вакцину сместим на 10 % от центра:

vaccine_combinations = covid_df['vaccines'].value_counts()[:10]
fig = plt.figure(figsize=(5, 5))
axes = fig.add_axes([0, 0, 1, 1])
axes.pie(
    vaccine_combinations,
    labels=vaccine_combinations.index,
    autopct='%.1f%%',
    explode = [0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
);

#! ДОБАВЛЕНИЕ ИНФОРМАТИВНОСТИ В ГРАФИКИ

#* Управлять информативностью графика можно с помощью методов координатной плоскости axes.
#* Перечислим основные из них (не пугайтесь, запоминать их не обязательно — вы всегда сможете
#* подсмотреть их в документации):

axes.set_title() — заголовок диаграммы, а также его настройки (например, параметр fontsize отвечает за размер шрифта);
axes.set_xlabel() — название оси абсцисс;
axes.set_ylabel() — название оси ординат;
axes.set_xticks() — установка отметок на оси абсцисс;
axes.set_yticks() — установка отметок на оси ординат;
axes.xaxis.set_tick_params() — управление параметрами отметок на оси абсцисс (например, параметр rotation отвечает за поворот отметок в градусах);
axes.yaxis.set_tick_params() — управление параметрами отметок на оси ординат;
axes.legend() — отображение легенды;
axes.grid() — установка сетки.
    
#* Для построения линейных графиков в Matplotlib используется метод plot()
#* (не путайте с методом plot() в Pandas!). При вызове метода без параметров по
#* оси ординат откладываются значения столбца таблицы, по оси абсцисс — индексы
#* (в нашем случае это будут даты). 

china_data = covid_df[covid_df['country'] == 'China']
china_grouped = china_data.groupby(['date'])[['confirmed', 'active', 'deaths', 'recovered']].sum()

#визуализация графиков
fig = plt.figure(figsize=(10, 4))
axes = fig.add_axes([0, 0, 1, 1])
axes.plot(china_grouped['confirmed'], label='Общее число зафиксированных случаев', lw=3)
axes.plot(china_grouped['deaths'], label='Общее число смертей', lw=3)
axes.plot(china_grouped['recovered'], label='Общее число выздоровевших пациентов', lw=3)
axes.plot(china_grouped['active'], label='Общее число активных случаев', lw=3, linestyle='dashed')

#установка параметров отображения
axes.set_title('Статистика Covid-19 в Китае', fontsize=16)
axes.set_xlabel('Даты')
axes.set_ylabel('Число случаев')
axes.set_yticks(range(0, 100000, 10000))
axes.xaxis.set_tick_params(rotation=30)
axes.grid()
axes.legend();

#! ИСПОЛЬЗОВАНИЕ НЕСКОЛЬКИХ СИСТЕМ КООРДИНАТ

#todo Построим столбчатые диаграммы с помощью метода bar().
#* x — названия категорий, которые будут располагаться по оси абсцисс;

#* height — высота столбцов диаграммы, массив из показателей для визуализации
#* (например, среднее, максимальное значение и т. д.);

#* width — ширина столбцов диаграммы;

#* color — цвет.

#* При отображении графиков создаём две координатные плоскости main_axes и insert_axes,
#* на каждой из них отдельно строим столбчатые диаграммы.

vacc_country = covid_df.groupby('country')['people_fully_vaccinated'].last().nlargest(5)
vacc_country_per_hundred = covid_df.groupby('country')['people_fully_vaccinated_per_hundred'].last().nlargest(5)

#визуализация главного графика
fig = plt.figure(figsize=(13, 4))
main_axes = fig.add_axes([0, 0, 1, 1])
main_axes.bar(x = vacc_country.index, height = vacc_country);
main_axes.set_ylabel('Число вакцинированных (2 компонент)')
main_axes.set_title('Топ 5 стран по числу полностью привитых людей')

#визуализация вспомогательного графика
insert_axes = fig.add_axes([0.6, 0.6, 0.38, 0.38])
insert_axes.bar(x = vacc_country_per_hundred.index, height = vacc_country_per_hundred, width=0.5);
insert_axes.set_ylabel('На 100 человек')
insert_axes.xaxis.set_tick_params(rotation=45)

#! SUBPLOTS

#* Создание дополнительных систем координат с помощью метода add_axes() полезно, однако используется
#* не так часто.В большинстве случаев для отображения нескольких систем координат используется
#* функция subplots(). Она создаёт целую таблицу из систем координат на одной фигуре. Функция
#* возвращает новую фигуру, а также список координатных плоскостей.

#todo Основные параметры метода subplots()

nrows — число строк;
ncols — число столбцов;
figsize — общий размер фигуры в дюймах (ширина и высота).

#* Например, следующий код создаст шесть координатных плоскостей, сведённых в таблицу размера 2x3:
fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(10, 5))

#*Теперь, обладая знаниями о методе subplots(), построим три графика:

#* 1.Столбчатую диаграмму, которая покажет динамику ежедневной вакцинации в России.
#* 2.Линейный график изменения ежедневной заболеваемости в стране.
#* 3.Гистограмму ежедневной заболеваемости в стране.
#* За построение гистограмм в библиотеке Matplotlib отвечает метод hist().

#todo Основные параметры метода hist()

x — массив чисел, для которого строится гистограмма;
bins — число столбцов (корзин);
orientation — ориентация гистограммы (по умолчанию 'vertical');
color — цвет.

#* Фильтруем таблицу covid_df по признаку страны и выбираем записи только для России.

#* Для того чтобы отобразить график в соответствующей координатной плоскости,
#* нужно обратиться к списку axes по индексу (от 0 до 2). Дальнейшая настройка
#* графиков вам уже известна.

russia_data = covid_df[covid_df["country"] == "Russia"]

# визуализация систем координат
fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 4))

# столбчатая диаграмма
axes[0].bar(
    x=russia_data["date"],
    height=russia_data["daily_vaccinations"],
    label="Число вакцинированных",
)
axes[0].set_title("Ежедневная вакцинация в России")
axes[0].xaxis.set_tick_params(rotation=45)

# линейный график
axes[1].plot(
    russia_data["date"],
    russia_data["daily_confirmed"],
    label="Число заболевших",
    color="tomato",
    lw=2,
)
axes[1].set_title("Ежедневная заболеваемость в России")
axes[1].xaxis.set_tick_params(rotation=45)

# гистограмма
axes[2].hist(
    x=russia_data["daily_confirmed"], label=["Число заболевших"], color="lime", bins=20
)
axes[2].set_title("Гистограмма заболеваемости в России")
axes[2].xaxis.set_tick_params(rotation=30)

#! Библиотека Seaborn

#* Seaborn — надстройка над библиотекой Matplotlib, которая значительно расширяет её возможности,
#* позволяя создавать графики более высокого уровня с эстетичным оформлением. Библиотека предоставляет
#* большое количество дополнительных опций для творчества при визуализации данных.
pip install seaborn

#* Начнём с гистограммы. Для визуализации гистограмм в библиотеке Seaborn используется метод histplot().

#todo Основные параметры метода histplot()

data — DataFrame, по которому строится график;
x — признак, который будет отложен по оси абсцисс;
y — признак, который будет отложен по оси ординат;
hue — группировочный категориальный признак, который позволяет строить отдельный график для каждой категории (не стоит использовать его для гистограмм, но он широко используется для других видов графиков в Seaborn);
ax — система координат Matplotlib, в которой строится график;
color — цвет графика;
bins — число столбцов в гистограмме (по умолчанию вычисляется автоматически с помощью специальных формул);
kde — параметр, указывающий, стоит ли сглаживать гистограмму кривой (по умолчанию False).