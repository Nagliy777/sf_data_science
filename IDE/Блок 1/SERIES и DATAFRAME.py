
SERIES КАК СТРУКТУРА ДАННЫХ

Series — это упорядоченная изменяемая коллекция объектов, имеющая так называемые
ассоциативные метки (индексы).

Рассмотрим несколько способов создания Series на примере со списком названий стран.

Способ 1 — из списка с использованием параметров функции pd.Series():

countries = pd.Series(
    data = ['Англия', 'Канада', 'США', 'Россия', 'Украина', 'Беларусь', 'Казахстан'],
    index = ['UK', 'CA', 'US', 'RU', 'UA', 'BY', 'KZ'],
    name = 'countries'
)
display(countries)

Способ 2 — из словаря, в котором ключами являются будущие метки, а значениями
— будущие значения Series, при этом использование параметра name также возможно:
    
countries = pd.Series({
    'UK': 'Англия',
    'CA': 'Канада',
    'US' : 'США',
    'RU': 'Россия',
    'UA': 'Украина',
    'BY': 'Беларусь',
    'KZ': 'Казахстан'},
    name = 'countries'
)
display(countries)

Доступ к элементам осуществляется с использованием loc или iloc.

.loc вызывается с квадратными скобками, в которые передаются метки. 
print(countries.loc['US'])
# США

Для получения элемента по индексу "KZ" нужно обратиться через .iloc по номеру 6:

print(countries.iloc[6])
# Казахстан



# DataFrame является двумерной структурой и представляется в виде таблицы,
# в которой есть строки и столбцы: столбцами в DataFrame выступают объекты Series, 
# а строки формируются из их элементов.
# Также в DataFrame есть метки (индексы), которые соответствуют каждой строке таблицы.

# Самый простой способ создания DataFrame — из словаря, ключами
# которого являются имена столбцов будущей таблицы, а значениями — списки,
# в которых хранится содержимое этих столбцов:
    
countries_df = pd.DataFrame({
    'country': ['Англия', 'Канада', 'США', 'Россия', 'Украина', 'Беларусь', 'Казахстан'],
    'population': [56.29, 38.05, 322.28, 146.24, 45.5, 9.5, 17.04],
    'square': [133396, 9984670, 9826630, 17125191, 603628, 207600, 2724902]
})


Также DataFrame можно создать из вложенного списка, внутренние списки
которого будут являться строками новой таблицы:

countries_df = pd.DataFrame(
    data = [
        ['Англия', 56.29, 133396],
        ['Канада', 38.05, 9984670],
        ['США', 322.28, 9826630],
        ['Россия', 146.24, 17125191],
        ['Украина', 45.5, 603628],
        ['Беларусь', 9.5, 207600],
        ['Казахстан', 17.04, 2724902]
    ],
    columns= ['country', 'population', 'square'],
    index = ['UK', 'CA', 'US', 'RU', 'UA', 'BY', 'KZ']
)
display(countries_df)   
    
В данном варианте создания DataFrame мы задаём имена столбцов в списке с
помощью параметра columns, а также инициализируем параметр index для задания меток стран.    
    
ДОСТУП К ДАННЫМ В DATAFRAME

Можно обратиться к DataFrame по имени столбца через точку:

countries_df.population

Другой вариант — обратиться к DataFrame по индексу и указать имя столбца:

countries_df['population']

Считаем среднее по строкам (axis = 0) в каждом столбце:
countries_df.mean(axis=0, numeric_only=True)

Считаем среднее по столбцам (axis = 1) в каждой строке:
countries_df.mean(axis=1, numeric_only=True)

ЗАПИСЬ В CSV-ФАЙЛ

Экспорт данных в формат csv осуществляется с помощью метода DataFrame to_csv().

Основные параметры метода DataFrame to_csv()

path_or_buf — путь до файла, в который будет записан DataFrame (например, data/my_data.csv);
sep — разделитель данных в выходном файле (по умолчанию ',');
decimal — разделитель чисел на целую и дробную части в выходном файле (по умолчанию '.');
columns — список столбцов, которые нужно записать в файл (по умолчанию записываются все столбцы);
index — параметр, определяющий, требуется ли создавать дополнительный столбец с индексами строк в файле (по умолчанию True).

Пример:
countries_df = pd.DataFrame({
    'country': ['Англия', 'Канада', 'США', 'Россия', 'Украина', 'Беларусь', 'Казахстан'],
    'population': [56.29, 38.05, 322.28, 146.24, 45.5, 9.5, 17.04],
    'square': [133396, 9984670, 9826630, 17125191, 603628, 207600, 2724902]
})

countries_df.to_csv('data/countries.csv', index=False, sep=';')

ЧТЕНИЕ CSV-ФАЙЛА
Для чтения таблицы из csv-файла используется функция модуля Pandas read_csv.
Функция возвращает DataFrame и имеет несколько важных параметров.

filepath_or_buffer — путь до файла, который мы читаем;
sep — разделитель данных (по умолчанию ',');
decimal — разделитель чисел на целую и дробную часть в выходном файле (по умолчанию '.');
names — список с названиями столбцов для чтения;
skiprows — количество строк в файле, которые нужно пропустить (например, файл может содержать служебную информацию, которая нам не нужна).

ЧТЕНИЕ CSV-ФАЙЛА ПО ССЫЛКЕ

На самом деле файл с данными не обязательно должен храниться у вас на компьютере. 
Если он находится в открытом доступе по ссылке (например, на Google Диске или GitHub), 
его можно прочитать и из интернета — для этого достаточно в функции read_csv() вместо пути до файла указать ссылку на файл. Например: