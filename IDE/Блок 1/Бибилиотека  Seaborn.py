
#! Библиотека Seaborn

#* Seaborn — надстройка над библиотекой Matplotlib, которая значительно расширяет её возможности,
#* позволяя создавать графики более высокого уровня с эстетичным оформлением. Библиотека предоставляет
#* большое количество дополнительных опций для творчества при визуализации данных.
pip install seaborn

#* Начнём с гистограммы. Для визуализации гистограмм в библиотеке Seaborn используется метод histplot().


#? Начнём с гистограммы. Для визуализации гистограмм в библиотеке Seaborn используется метод histplot().
Основные параметры метода histplot()

data — DataFrame, по которому строится график;
x — признак, который будет отложен по оси абсцисс;
y — признак, который будет отложен по оси ординат;
hue — группировочный категориальный признак, который позволяет строить отдельный график для каждой категории (не стоит использовать его для гистограмм, но он широко используется для других видов графиков в Seaborn);
ax — система координат Matplotlib, в которой строится график;
color — цвет графика;
bins — число столбцов в гистограмме (по умолчанию вычисляется автоматически с помощью специальных формул);
kde — параметр, указывающий, стоит ли сглаживать гистограмму кривой (по умолчанию False).

#todo Пример

#* Построим сразу две гистограммы: одна будет иллюстрировать общее распределение ежедневной
#* заболеваемости (daily_confirmed), а вторая — то же распределение в разрезе стран. 
#* Для этого создаём две координатные плоскости с помощью метода subplots(). 

#* На первой координатной плоскости рисуем простую гистограмму с 25 столбцами, а также добавим на неё
#* сглаживающую кривую. 

#* На второй гистограмме добавляем параметр названия страны по оси y. В таком случае количество
#* наблюдений будет обозначаться на диаграмме яркостью цвета (чем темнее полоса, тем больше наблюдений находится в интервале).

fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(10, 8))
sns.histplot(
    data=croped_covid_df,
    x='daily_confirmed_per_hundred',
    bins=25,
    kde=True,
    ax=axes[0]
);
axes[0].set_title('Гистограмма ежедневной заболеваемости на 100 человек', fontsize=16)
sns.histplot(
    data=croped_covid_df,
    x='daily_confirmed_per_hundred',
    y='country',
    bins=25,
    color='red',
    ax=axes[1]
);

#? Коробчатые диаграммы в Seaborn строятся с помощью метода boxplot().

#todo Пример

#* Ящики отразим горизонтально (для этого по оси x отложим признак летальности, а по оси y — страны),
#* параметр orient отвечает за ориентацию диаграммы, а width — за ширину коробок:

fig = plt.figure(figsize=(10, 7))
boxplot = sns.boxplot(
    data=croped_covid_df,
    y='country',
    x='death_rate',
    orient='h',
    width=0.9
)
boxplot.set_title('Распределение летальности по странам');
boxplot.set_xlabel('Летальность');
boxplot.set_ylabel('Страна');
boxplot.grid()

#? Для построения столбчатых диаграмм в Seaborn используется метод barplot()
#* С помощью неё мы можем, например, посмотреть на средний ежедневный процент заболевших
#* в странах по кварталам

#* По умолчанию метод отображает среднее по столбцу, который указан в параметре x (вместо среднего
#* можно вычислить и любую другую статистическую характеристику, наименование которой задаётся в параметре
#* estimator). Для добавления многоуровневости используется параметр hue, который позволяет группировать
#* данные по признаку:

#todo Пример

fig = plt.figure(figsize=(10, 7))
croped_covid_df['quarter'] = croped_covid_df['date'].dt.quarter
barplot = sns.barplot(
    data=croped_covid_df,
    x='country',
    y='daily_confirmed_per_hundred',
    hue='quarter',
)
barplot.set_title('Средний процент болеющего населения по кварталам');

#?  Построим один из самых любимых дата-сайентистами графиков — jointplot()
 
#* В нём совмещены диаграмма рассеяния и гистограмма. Это довольно удобный и полезный инструмент, 
#* когда мы хотим одновременно посмотреть и на распределения переменных, и сразу оценить их взаимосвязь.
#* Построим jointplot зависимости ежедневной заболеваемости в странах от общей численности населения в
#* процентах (daily_confirmed_per_hundred) от числа полностью вакцинированных в процентах 
#* (people_fully_vaccinated_per_hundred).
#* Параметры xlim и ylim определяют диапазон отображения осей x и y. Параметр height отвечает за
#* высоту и ширину графика (он квадратный).

#todo Пример

jointplot = sns.jointplot(
    data=croped_covid_df, 
    x='people_fully_vaccinated_per_hundred', 
    y='daily_confirmed_per_hundred',
    hue='country',
    xlim = (0, 40),
    ylim = (0, 0.1),
    height=8,
)

#? Для построения тепловой карты в Seaborn используется метод heatmap().

#* Данный метод работает с табличными данными и визуализирует все ячейки таблицы с
#* помощью цвета. Параметр annot отвечает за отображение легенды (аннотации), параметр cmap
#* — за цветовую гамму графика.

#todo Пример
heatmap = sns.heatmap(data=pivot, cmap='YlGnBu')
heatmap.set_title('Тепловая карта вакцинации', fontsize=16);