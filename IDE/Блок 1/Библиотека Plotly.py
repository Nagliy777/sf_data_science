
#! Библиотека Plotly является сравнительно новым коммерческим продуктом с бесплатной версией,
#! который создавался специально для Data Science, в отличие от относительно старой библиотеки Matplotlib, которая
#! изначально разрабатывалась для научных вычислений.

#* Библиотека Plotly позволяет строить интерактивные графики, которые можно приближать, отдалять,
#* а также просматривать значения на графике в реальном времени. К тому же в библиотеке собрано
#* огромнейшее количество красочных методов визуализации. У Plotly приятный дизайн, а способов
#* работы с ней несколько.

#* С помощью Plotly можно делать сложные визуализации с элементами управления,
#* например строить интерактивную 3D-визуализацию, карту мира и многое другое.

#? Библиотека нуждается в дополнительной установке. Для этого введите в командной строке
#? (или командной строке Anaconda) следующее:

pip install plotly
pip install --upgrade nbformat

#* Из библиотеки нам понадобятся модуль express, он традиционно импортируется под псевдонимом px.

import plotly
import plotly.express as px

#? ЭКСПРЕСС-РЕЖИМ

#* Plotly позволяет строить графики в нескольких режимах. Мы рассмотрим самый новый
#* и подающий надежды — экспресс-режим. Его функциональность скромнее, чем у полного
#* режима Plotly, но нам её будет более чем достаточно.

#todo С помощью экспресс-режима (px) можно строить уже знакомые нам графики:

line() — линейные графики;
histogram() — гистограммы;
scatter() — диаграммы рассеяния;
box() — коробчатые диаграммы;
bar() — столбчатые диаграммы;
pie() — круговые диаграммы.

#? Основные параметры метода line()

data_frame — DataFrame, по которому строится график;
x — признак по оси абсцисс;
y — признак по оси ординат;
height — высота графика;
width — ширина графика;
title — название графика.

#todo Пример

line_data = covid_df.groupby('date', as_index=False).sum()
fig = px.line(
    data_frame=line_data, #DataFrame
    x='date', #ось абсцисс
    y=['confirmed', 'recovered', 'deaths', 'active'], #ось ординат
    height=500, #высота
    width=1000, #ширина
    title='Confirmed, Recovered, Deaths, Active cases over Time' #заголовок
)
fig.show()

#? Столбчатая диаграмма,

color — группирующий признак, в соответствии с которым будут раскрашены столбцы диаграммы;
text — текст, который будет подписан на столбцах диаграммы;
orientation — ориентация графика ('v' — вертикальная, 'h' — горизонтальная)

#todo Пример

#считаем средний процент выздоровлений для каждой страны
bar_data = covid_df.groupby(
    by='country',
    as_index=False
)[['recover_rate']].mean().round(2).nlargest(10, columns=['recover_rate'])

#строим график
fig = px.bar(
    data_frame=bar_data, #датафрейм
    x="country", #ось x
    y="recover_rate", #ось y
    color='country', #расцветка в зависимости от страны
    text = 'recover_rate', #текст на столбцах
    orientation='v', #ориентация графика
    height=500, #высота
    width=1000, #ширина
    title='Top 10 Countries for Recovery Rate' #заголовок
)

#отображаем его
fig.show()


#? график treemap() (древесная, или иерархическая, диаграмма)

#* Такой график используется для исследования показателя, когда число возможных категорий велико

Основные параметры метода treemap()

data_frame — DataFrame, по которому строится график;
path — категориальные признаки (их может быть несколько), в разрезе которых строится диаграмма;
values — показатель, по которому рассчитываются размеры прямоугольников.

#todo Пример

#считаем среднее ежедневно фиксируемое количество выздоровевших по странам
treemap_data = covid_df.groupby(
    by='country',
    as_index=False
)[['daily_recovered']].mean()

#строим график
fig = px.treemap(
    data_frame=treemap_data, #DataFrame
    path=['country'], #категориальный признак, для которого строится график
    values='daily_recovered', #параметр, который сравнивается
    height=500, #высота
    width=1000, #ширина
    title='Daily Recovered Cases by Country' #заголовок
)

#отображаем график
fig.show()

#! АНИМАЦИЯ ГРАФИКОВ ВО ВРЕМЕНИ

#? Основные параметры метода choropleth()
data_frame — DataFrame, по которому строится график;
locations — название столбца, из которого берутся локации (столбец со странами или регионами);

locationmode — режим геопривязки; определяет, как будет производиться сопоставление данных с
картой в Plotly (возможно сопоставление по названию страны, "country_name", или по её трёхзначному шифру,
согласно международному стандарту ISO-3);

range_color — диапазон изменения цвета;
animation_frame — анимирующий признак, изменяя который, мы получаем визуализацию во времени;
color_continuous_scale — цветовая палитра.

#todo Пример
#преобразуем даты в строковый формат
choropleth_data = covid_df.sort_values(by='date')
choropleth_data['date'] = choropleth_data['date'].astype('string')

#строим график
fig = px.choropleth(
    data_frame=choropleth_data, #DataFrame
    locations="country", #столбец с локациями
    locationmode = "country names", #режим сопоставления локаций с базой Plotly
    color="confirmed", #от чего зависит цвет
    animation_frame="date", #анимационный бегунок
    range_color=[0, 30e6], #диапазон цвета
    title='Global Spread of COVID-19', #заголовок
    width=800, #ширина
    height=500, #высота
    color_continuous_scale='Reds' #палитра цветов
)

#отображаем график
fig.show()

#! ТРЁХМЕРНАЯ ВИЗУАЛИЗАЦИЯ

#? Для построения такой диаграммы используем метод scatter_3d(). Добавим несколько параметров:

z — параметр по оси аппликат;
log_x — установка логарифмического масштаба по оси x;
log_y — установка логарифмического масштаба по оси y.

#todo Пример
#фильтруем таблицу по странам
countries=['United States', 'Russia', 'United Kingdom', 'Brazil', 'France']
scatter_data = covid_df[covid_df['country'].isin(countries)]

#строим график
fig = px.scatter_3d(
    data_frame=scatter_data, #DataFrame
    x = 'daily_confirmed', #ось абсцисс
    y = 'daily_deaths', #ось ординат
    z = 'daily_vaccinations', #ось аппликат
    color='country', #расцветка в зависимости от страны
    log_x=True, 
    log_y=True,
    width=1000,
    height=700
)

#отображаем график
fig.show()
fig.write_html("plotly/scatter_3d.html")

#! СОХРАНЕНИЕ ГРАФИКА PLOTLY

#* Чтобы сохранить интерактивный график, построенный в библиотеке Plotly, чаще всего используется
#* метод фигуры fig.write_html('path/to/file.html'), который сохраняет график в формате HTML, после
#* чего вы можете вставлять его на свой сайт, в веб-приложение или просто делиться им с коллегами. 

#todo Сохраним график трёхмерной диаграммы рассеяния:
fig.write_html("plotly/scatter_3d.html")

# В результате в папке plotly (которую необходимо создать заранее) у вас появится файл с графиком.