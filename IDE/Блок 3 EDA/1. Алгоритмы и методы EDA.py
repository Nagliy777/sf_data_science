
#! Жизненный цикл ML-модели и роль EDA в машинном обучении

#* Тот, кто занимается машинным обучением, обычно проходит следующие этапы: формулировка бизнес-проблемы,
#* сбор данных и их очистка, разведывательный анализ данных, разработка и построение модели, внедрение модели
#* в продакшен. Всё это называется жизненным циклом модели машинного обучения.

#? 0. ПОСТАНОВКА ПРОБЛЕМЫ

#todo Микрокредитная организация решила автоматизировать процесс выдачи кредитов и обратилась за помощью
#todo к специалистам по машинному обучению. Вместе с аналитиками компания выяснила, что им необходима
#todo прогностическая модель, которая определяла бы по данным клиента вероятность его дефолта.

#* Дефолт — невыполнение обязательств договора займа, например неоплата процентов или
#* основного долга в установленный период.

#* После того как задача была поставлена, начинается процесс построения модели. 

#? 1. СБОР ДАННЫХ

#* Модель машинного обучения напрямую зависит от количества и качества передаваемых в неё данных.
#* Чтобы получить в итоговой модели более качественные данные, на этапе сбора нам необходимо собрать
#* максимальное их количество.

#todo Дата-аналитики микрокредитной организации запросили у сотового оператора информацию о перемещениях
#todo клиента. Так компания сможет проверить, верно ли клиент указал место проживания и работы или
#todo предоставил ложную информацию, что, по мнению аналитиков, может стать полезным признаком.

#? 2. ОЧИСТКА ДАННЫХ

#* После сбора данных мы должны избавиться от «мусора» (некачественных данных), и именно
#* от этого этапа будет зависеть качество финальной модели машинного обучения. 

#todo Garbage in — garbage out (GIGO), в пер. с англ. «мусор на входе — мусор на выходе».

#* На этапе очистки данных мы определяем пропущенные значения, аномалии и выбросы в данных. 
#* Данные с пропусками в большинстве случаев нельзя передать в модель.

#todo В случае с микрокредитной организацией на ранних этапах работы компании в анкете клиента не заполнялся
#todo регион проживания. Аналитики пытаются по адресу заполнить значения, а там, где это невозможно,
#todo просто проставляют значение ‘unknown’, как делали это вы в модуле PYTHON-14. Очистка данных.

#todo Дублирующиеся данные и выбросы, аномальные значения не приносят пользу алгоритму. 

#todo Слишком высокие значения зарплат чаще всего являются ложной информацией среди заемщиков и могут
#todo сбивать алгоритмы с толку, поэтому для таких признаков проводят обработку выбросов. Эти действия
#todo вы выполняли в модуле PYTHON-14. Очистка данных, тем самым подготавливая почву для последующего
#todo анализа данных.

#? 3. РАЗВЕДЫВАТЕЛЬНЫЙ АНАЛИЗ ДАННЫХ 

#* Данные ценны не сами по себе, а только если приносят пользу. Разведывательный анализ данных
#* похож на работу детектива: имея под рукой данные, вы ищете подсказки и идеи для извлечения
#* из них полезной информации для бизнес-задачи, которую вы пытаетесь решить. Вы исследуете
#* одну переменную, затем две переменные вместе, а затем сразу несколько переменных. Если
#* ваша модель показывает неудовлетворительные результаты, то почти всегда виновником 
#* является набор обучающих данных, содержащий ошибки. Они и создают потолок качества
#* для вашей модели.

#todo Дата-сайентисты обнаружили, что очень важным параметром является балл из кредитной истории заёмщика.
#todo Он действительно содержит в себе очень много информации о поведении заёмщика в предыдущих кредитах.
#todo Такая информация будет скорее всего полезна модели. Специалисты по данным приняли решение раскрыть
#todo этот важный признак на несколько составляющих, поскольку полагают, что новые, более сильные признаки
#todo сделают модель лучше.

#? 4. ЭТАП МОДЕЛИРОВАНИЯ И ВЫВОДА МОДЕЛИ В ПРОДАКШЕН 

#* На этом этапе ведётся построение предсказательных моделей, проверка качества и публикация модели.
#* Эти этапы вы будете подробно изучать далее в курсе в блоках по машинному обучению. 

#todo Важно! На самом деле цикл машинного обучения редко имеет линейную структуру. Он представляют
#todo собой повторяющийся цикл улучшения данных и модели. В любой момент мы можем вернуться на этап
#todo разведывательного анализа данных или даже на этап формулирования бизнес-проблемы, если
#todo качество модели неудовлетворительное.

#* В реальной жизни не всегда полный цикл проводится одним человеком. На данный момент мы можем выделить
#* три направления в машинном обучении.

#* 1 Дата-аналитики проводят предварительный анализ данных и их очистку, ищут закономерности в данных
#* и ответы на запросы бизнеса.

#* 2 Дата-сайентист работает с большими объёмами данных, создаёт рекомендательные алгоритмы
#* и прогнозные модели. Эти этапы вы будете подробно изучать далее в курсе в блоках по машинному обучению.

#* 3 Дата-инженер обеспечивает сбор и хранение данных. Дата-инженер также занимается внедрением
#* финальной модели машинного обучения в работающую систему.

#todo В нашем примере дата-аналитики подумали, что хорошо было бы собирать информацию об устройстве
#todo пользователя, поскольку это может оказаться важным признаком для формирования списка личных
#todo рекомендаций. Дата-инженеры ставят задачу и с этого момента в базу данных будет записываться
#todo информация об устройстве каждого пользователя. Через некоторое время её можно будет
#todo анализировать и использовать в моделях. 

#todo Однако зачастую границы очень размыты: аналитик, например, также может заниматься сбором
#todo данных, а дата-сайентист — строить визуализацию и искать закономерности в данных.

#todo Это часто зависит от размера компании. В небольших компаниях вы скорее всего будете совмещать
#todo сразу несколько направлений. В больших корпорациях за эти направления могут отвечать целые отделы.

#! Алгоритм и методы EDA

#? МЕТОД FEATURE ENGINEERING (ПРОЕКТИРОВАНИЕ ПРИЗНАКОВ)

#todo Цель этого метода — создать новые, более сильные признаки для обучения модели. Изучать
#todo проектирование признаков мы будем далее — в модулях, посвящённых проектированию признаков.

#? МЕТОД FEATURE SELECTION (ОТБОР ПРИЗНАКОВ)

#todo Это процесс выбора признаков из общего набора данных признаков, больше всего влияющих на качество модели.
#todo Проверить это помогают различные статистические тесты значимости, которые мы подробно будем изучать
#todo далее в модулях про разведывательный анализ данных.

#? МЕТОД КОДИРОВАНИЯ ПРИЗНАКОВ

#* Чаще всего в кодировании нуждаются категориальные признаки. Вы с ними познакомились в PYTHON-11.
#* Базовые приемы работы с данными в Pandas Юнит 5. Тип данных Category. Они представлены обычно в
#* строковом формате, а большинство алгоритмов машинного обучения требуют численного формата. 

#todo У нас есть признак, говорящий о том, к какой кухне мира относят ресторан, например к средиземноморской. 
#todo В таком виде мы не можем передать данные в модель, поэтому закодируем их таким образом:

#* 1 — средиземноморская кухня
#* 2  — китайская
#* 3 — грузинская

#todo Есть и другое кодирование: когда мы переходим от численного признака к категории за счёт
#todo кодирования интервалов одним значением. Например, средний чек в ресторане мы можем
#todo закодировать как:

#* 1 — до 1 000 руб.
#* 2 — от 1 000 руб. до 3 000 руб.
#* 3 — от 3 000 руб. и выше.

#* Такое кодирование помогает отнести ресторан к определённому ценовому сегменту. Мы можем предположить,
#* что рестораны из высокого ценового сегмента (значение 3) скорее получат высокий рейтинг.
#* Однако, чтобы проверить эту гипотезу, нам необходимы знания математической статистики.
#* Проверка статистических гипотез — также один из важных методов разведывательного анализа данных.

#! EDA одной строкой кода

#* В реальной жизни большую часть работы над моделью занимает разведывательный анализ данных.
#* С целью решения подобной проблемы появились инструменты автоматической визуализации и
#* представления датасета.

#* К таким инструментам можно отнести следующие библиотеки Python, которые могут выполнять EDA
#* всего одной строкой кода:

#* d-tale; 
#* ydata-profiling;
#* sweetviz.

#? YDATA-PROFILING

#* Ydata-profiling — это библиотека с открытым исходным кодом, которая создаёт подробный
#* отчёт по данным. Ydata-profiling можно легко использовать для больших наборов данных:
#* отчёты создаются всего за несколько секунд.
#* Установка (выполните в терминале или ячейке ноутбука):
#* pip install -U ydata-profiling
#* pip install ipywidgets

#todo РАБОТА С YDATA-PROFILING НА ПРИМЕРЕ ВИННЫХ ОБЗОРОВ

#* Начните свою работу с загрузки датасета винных обзоров, с которым мы познакомились в Юните 5. Проверка.

import pandas as pd
from ydata_profiling import ProfileReport

df = pd.read_csv('wine.csv')
#*Сгенерируйте отчёт одной строкой.

profile = ProfileReport(df, title="Pandas Profiling Report")

#* Чтобы сохранить собственный отчёт в виде HTML-файла, вы можете воспользоваться методом to_file(),
#* передав в него путь до файла, в который вы хотите сохранить результат:
profile.to_file("your_report.html")

#* Результат отчёта ydata-profiling можно использовать для первичной визуализации набора данных,
#* числового и статистического анализа переменных, с которым вы познакомитесь в следующих моделях
#* по статистике. Также отчёт используется для вывода корреляции переменных, выявления пропущенных
#* значений, а также для просмотра первых и последних строк набора данных.

#? SWEETVIZ

#todo Sweetviz — это библиотека автоматического анализа с открытым исходным кодом. Sweetviz также
#todo можно использовать для сравнения нескольких наборов данных и выводов по ним. Это может
#todo быть удобно, когда необходимо сравнить обучающий и тестовый наборы данных. Об этом вы
#todo узнаете далее в модулях про машинное обучение.

#todo РАБОТА СО SWEETVIZ НА ПРИМЕРЕ ВИННЫХ ОБЗОРОВ

#* Установка:
pip install sweetviz

#* Начните свою работу с загрузки датасета винных обзоров.
import pandas as pd
import sweetviz as sv

df = pd.read_csv('wine.csv')

#* Чтобы проанализировать набор данных, просто используйте функцию analyze(), а затем — show_html():

report = sv.analyze(df)
report.show_html()

#? D-TALE

#todo D-Tale — это библиотека с открытым исходным кодом. D-Tale делает подробный разведывательный
#todo анализ набора данных. Интересная особенность: библиотека предоставляет функцию экспорта кода
#todo для каждого графика или элемента анализа в отчёте.

#* Установка:

pip install dtale

#todo РАБОТА С D-TALE НА ПРИМЕРЕ ВИННЫХ ОБЗОРОВ

#* Начните свою работу с загрузки датасета винных обзоров.

import pandas as pd
import dtale

df = pd.read_csv('wine.csv')
#* Сгенерируйте отчёт одной строкой.

d = dtale.show(df)

