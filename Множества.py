Множество — это структура данных, состоящая из уникальных элементов (элементы не могут повторяться).
Элементы внутри множества могут быть объектами неизменяемых типов (числа, строки и кортежи). 
Множества не поддерживают хранение изменяемых типов данных, таких как списки, словари и сами множества. 
Порядок элементов во множестве не фиксирован, то есть элементы не упорядочены.

Создание множества:
#set1 = set()
#print(set1)  -----> set()

#s1 = set("hello")
#print(s1)  -----> {'e', 'l', 'h', 'o'}

Мы видим, что в множестве содержится только одна буква ‘l’, так как множества содержат только уникальные элементы.

Важно! Вы можете создать множество с помощью фигурных скобок, но внутри множества уже должны быть элементы (хотя бы один). 
Пустые фигурные скобки указывают, что создаётся словарь, а не множество — про это нужно помнить.

#s2 = {1,2,3}
#print(s2) -----> {1, 2, 3}

Методы множеств

Метод .add() быстро и безболезненно добавить новый элемент в множество можно
#s = {1, 2, 3, 4}
#s.add(5)
#print(s) -----> {1, 2, 3, 4, 5}

Метод .update() добавляет во множество сразу несколько элементов.
#a = {1, 2, 3, 4}   Множество
#b = [5, 6, 7]      Список
#c = {'a':1, 'b':2} Словарь
#a.update(b)
#a.update(c)
#print(a) -----> {1, 2, 3, 4, 5, 6, 7, 'a', 'b'}

Методы .discard(), .remove() 
Их отличие друг от друга состоит в том,что при удалении уже отсутствующего элемента из множества discard() 
ничего не сделает, а вот .remove() выкинет ошибку.Суть выбора заключается в логике вашего алгоритма. 
Если вам важно, чтобы удаление элемента было явным, используйте метод .remove().

#s1 = {1,2,3,4,5}
#s1.remove(10)
#print(s1)  -----> KeyError: 10

#s1 = {1,2,3,4,5}
#s1.discard(10)
#print(s1)  -----> {1, 2, 3, 4, 5}

Метод .union() берёт все имеющиеся элементы в двух множествах ровно один раз. Порядок следования элементов может не соблюдаться.

#cluster1 = {"item1", "item2", "item3", "item4"}
#cluster2 = {"item2", "item3", "item5", "item7"}
#print(cluster1.union(cluster2)) -----> {'item3', 'item2', 'item7', 'item4', 'item1', 'item5'}


#num_set = list(range(0,11)) Создал список
#num_set1 = set(num_set) Список перевёл в множество
#date_num = set([1,9,4,8]) Список перевёл в множество
#print(num_set1.union(date_num))  -----> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

Метод .intersection() берутся все элементы, которые есть в обоих множествах.Ровно один раз.
#cluster1 = {"item1", "item2", "item3", "item4"}
#cluster2 = {"item2", "item3", "item5", "item7"}
#print(cluster1.intersection(cluster2)) -----> {'item3', 'item2'}

Метод .difference() выбирает все элементы из первого множества, которых нет во втором множестве.
#cluster1 = {"item1", "item2", "item3", "item4", "item5"}
#cluster2 = {"item3", "item4", "item5", "item6"}
#print(cluster1.difference(cluster2)) -----> {'item2', 'item1'}

Метод .issubset() используется для того, чтобы узнать, все ли элементы из первого множества есть во втором множестве.
#cluster1 = {"item1", "item2", "item3"}
#cluster2 = {"item2", "item3", "item4", "item5", "item6"}
#print(cluster1.issubset(cluster2)) -----> False

#cluster3 = {"item2", "item3", "item4", "item5", "item6"}
#cluster4 = {"item2", "item3", "item4", "item5", "item6"}
#print(cluster3.issubset(cluster4)) -----> True