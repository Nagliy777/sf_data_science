ОПЕРАТОР	ЗНАЧЕНИЕ
<	        Меньше. Условие верно, если первый операнд меньше второго
>	        Больше. Условие верно, если первый операнд больше второго
<=	        Меньше или равно. Условие верно, если первый операнд меньше второго либо равен ему
>=	        Больше или равно. Условие верно, если первый операнд больше второго либо равен ему
==	        Равенство. Условие верно, если операнды равны
!=	        Неравенство. Условие верно, если операнды неравны

not	        Логическое «НЕ»	Возвращает противоположное значение
or	        Логическое «ИЛИ»	Возвращает True, если хотя бы одна из переменных True
and	        Логическое «И»	Возвращает True, если обе переменные True
in, not in	Проверка принадлежности	Возвращает True, если проверяемая переменная содержится/не содержится в последовательности (списке, кортеже, строке...)
is, is not	Проверка тождественности	Возвращает True, если проверяемые объекты эквивалентны/не эквиваленты. То есть переменные ссылаются на один и тот же адрес в памяти компьютера

#print(not True) -----> False
#print(not False) -----> True

#cond1 = 0 < 1
#cond2 = 1 < 4
#print(cond1 and cond2) -----> True

#cond3 = 't' in "python"
#cond4 = 't' in "django"
#print(cond3 and cond4) -----> False

#print(('t' in "python") or ('t' in "django")) -----> True

#string_1 = 'abc'
#string_2 = 'ABC'
#print(string_1 == string_2) -----> False

#print(list(str(123456789))) -----> ['1', '2', '3', '4', '5', '6', '7', '8', '9']

Тип перемнной map принимает на вход функцию и последовательность и отдаёт результат применения функции к каждому элементу из последовательности.
#print(list(map(int,['1', '2', '3', '4', '5', '6', '7', '8', '9']))) -----> [1, 2, 3, 4, 5, 6, 7, 8, 9]

#list_digit = list(map(int, list(str(123456789))))
#print(5 in list_digit) -----> True

#a = [1, 2, 3]
#print(id(a))   id возвращает идентификатор объекта
#b = a
#print(id(b))   id возвращает идентификатор объекта
#print(a is b)  True

Эквивалентные объекты всегда равны. Но равные объекты не всегда эквивалентны:
#a = [1, 2, 3]
#b = [1, 2, 3]
#print(a == b)  -----> True
#print(a is b)  -----> False

#Тип перемнной  None используется, например, когда мы не знаем значение переменной, но хотим объявить её.
#Проверяет, является ли значение переменной None, следует использовать не оператор сравнения ==, 
#а проверку эквивалентности, потому что идентификатор объекта None не меняется на протяжении всей программы.

#print(a is None) # Хорошо

Проверка: чётное или не чётное число
#a=345255215252
#b=list(str(a)) число в список из строк
#c =list(map(int,b)) список из строк в список из чисел
#d=(c[0])  узнаю первое число
#e=(d%2)   делю без остатка
#print(e==0) если остатка нет, значит чётное. ---> False

Код короче написан
#a=345255215252
#b=list(map(int,str(a))) 
#d=(b[0])  
#e=(d%2)   
#print(e==0) ---> False

Представьте, что вы обрабатываете заполненные пользователями онлайн-заявки. Переменная phone в виде строки 
хранит указанный пользователем номер телефона или None, если соответствующее поле в анкете заполнено не было.
Как можно проверить, оставил ли пользователь номер телефона?
#phone = {'2525222':'IVAN'}
#print(phone is not None)




